generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id           Int            @id(map: "country_pk") @default(autoincrement())
  name         String
  code         String         @unique(map: "Country_Code_Unique")
  Manufacturer Manufacturer[]
  State        State[]
}

model Manufacturer {
  id         Int      @id(map: "Manufacturer_pk") @default(autoincrement())
  name       String?
  id_Country Int
  Country    Country  @relation(fields: [id_Country], references: [id], map: "Country_fk")
  Sensor     Sensor[]
}

model MeasuredData {
  id                                  Int                            @id(map: "MeasuredData_pk") @default(autoincrement())
  rawValue                            Float
  convertedValue                      Float?
  timestamp                           DateTime?                      @db.Timestamptz(6)
  code_Station_Sensor_MeasurementUnit Int
  Station_Sensor_MeasurementUnit      Station_Sensor_MeasurementUnit @relation(fields: [code_Station_Sensor_MeasurementUnit], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "Station_Sensor_MeasurementUnit_fk")
  TimeSeries_MeasureData              TimeSeries_MeasureData[]
}

model MeasurementUnit {
  id                             Int                              @id(map: "MeasurementUnit_pk") @default(autoincrement())
  code                           Int                              @unique(map: "MeasurementUnit_Code_Unique")
  name                           String?
  description                    String?
  Sensor_MeasurementUnit         Sensor_MeasurementUnit[]
  Station_Sensor_MeasurementUnit Station_Sensor_MeasurementUnit[]
}

model Sensor {
  id                             Int                              @id(map: "Sensor_pk") @default(autoincrement())
  code                           Int                              @unique(map: "Sensor_Code_Unique")
  serial                         Int?
  SKU                            String?
  lifespan                       Unsupported("interval")?
  id_Manufacturer                Int?
  Manufacturer                   Manufacturer?                    @relation(fields: [id_Manufacturer], references: [id], map: "Manufacturer_fk")
  Sensor_MeasurementUnit         Sensor_MeasurementUnit[]
  Station_Sensor                 Station_Sensor[]
  Station_Sensor_MeasurementUnit Station_Sensor_MeasurementUnit[]
}

model SensorMeasurementConversion {
  id                     Int                      @id(map: "SensorMeasurementConversion_pk") @default(autoincrement())
  equation               String?
  description            String?
  Sensor_MeasurementUnit Sensor_MeasurementUnit[]
}

model Sensor_MeasurementUnit {
  id                             Int                          @id(map: "MeasurementUnit_Sensor_pk") @default(autoincrement())
  id_MeasurementUnit             Int?
  id_SensorMeasurementConversion Int?
  precision                      Float?
  minValue                       Float?
  maxValue                       Float?
  id_Sensor                      Int?
  MeasurementUnit                MeasurementUnit?             @relation(fields: [id_MeasurementUnit], references: [id], map: "MeasurementUnit_fk")
  Sensor                         Sensor?                      @relation(fields: [id_Sensor], references: [id], map: "Sensor_fk")
  SensorMeasurementConversion    SensorMeasurementConversion? @relation(fields: [id_SensorMeasurementConversion], references: [id], map: "SensorMeasurementConversion_fk")
}

model Station {
  id                             Int                              @id(map: "Station_pk") @default(autoincrement())
  code                           Int                              @unique(map: "Station_Code_Unique")
  description                    String?
  creationTS                     DateTime?                        @default(now()) @db.Timestamptz(6)
  active                         Boolean                          @default(true)
  deactivationTS                 DateTime?                        @db.Timestamptz(6)
  id_StationModel                Int?
  StationModel                   StationModel?                    @relation(fields: [id_StationModel], references: [id], map: "StationModel_fk")
  Farm_Station                   Farm_Station[]
  Station_Sensor                 Station_Sensor[]
  Station_Sensor_MeasurementUnit Station_Sensor_MeasurementUnit[]
}

model StationModel {
  id          Int       @id(map: "StationModel_pk") @default(autoincrement())
  name        String?
  upc         Int?
  serial      BigInt?
  description String?
  Station     Station[]
}

model Station_Sensor {
  id         Int      @id(map: "StationSensor_pk") @default(autoincrement())
  id_Sensor  Int?
  id_Station Int?
  Sensor     Sensor?  @relation(fields: [id_Sensor], references: [id], map: "Sensor_fk")
  Station    Station? @relation(fields: [id_Station], references: [id], map: "Station_fk")
}

model Station_Sensor_MeasurementUnit {
  id                 Int              @id(map: "MeasuredData_Pivot_pk") @default(autoincrement())
  code               BigInt           @unique(map: "MeasuredData_Pivot_Code_Unique")
  id_Station         Int?
  id_Sensor          Int?
  id_MeasurementUnit Int?
  MeasurementUnit    MeasurementUnit? @relation(fields: [id_MeasurementUnit], references: [id], map: "MeasurementUnit_fk")
  Sensor             Sensor?          @relation(fields: [id_Sensor], references: [id], map: "Sensor_fk")
  Station            Station?         @relation(fields: [id_Station], references: [id], map: "Station_fk")
  MeasuredData       MeasuredData[]
}

model TimeSeries {
  id                     Int                      @id(map: "TimeSeries_pk") @default(autoincrement())
  startTS                DateTime                 @db.Timestamptz(6)
  endTS                  DateTime                 @db.Timestamptz(6)
  count                  Int?
  sum                    Float?
  average                Float?
  min                    Float?
  max                    Float?
  id_TimeSeriesInterval  Int?
  TimeSeriesInterval     TimeSeriesInterval?      @relation(fields: [id_TimeSeriesInterval], references: [id], map: "TimeSeriesInterval_fk")
  TimeSeries_MeasureData TimeSeries_MeasureData[]
}

model TimeSeriesInterval {
  id          Int          @id(map: "TimeSeriesInterval_pk") @default(autoincrement())
  description String
  TimeSeries  TimeSeries[]
}

model TimeSeries_MeasureData {
  id              Int           @id(map: "TimeSeries_MeasureData_pk") @default(autoincrement())
  id_TimeSeries   Int?
  id_MeasuredData Int?
  MeasuredData    MeasuredData? @relation(fields: [id_MeasuredData], references: [id], map: "MeasuredData_fk")
  TimeSeries      TimeSeries?   @relation(fields: [id_TimeSeries], references: [id], map: "TimeSeries_fk")
}

model Address {
  id         Int     @id(map: "Address_pk") @default(autoincrement())
  number     String?
  complement String?
  active     Boolean @default(true)
  id_Area    Int?
  Area       Area?   @relation(fields: [id_Area], references: [id], map: "Area_fk")
  Farm       Farm[]
  User       User[]
}

model Area {
  id             Int          @id(map: "Area_pk") @default(autoincrement())
  id_PublicPlace Int?
  PublicPlace    PublicPlace? @relation(fields: [id_PublicPlace], references: [id], map: "PublicPlace_fk")
  Address        Address[]
  PostalArea     PostalArea[]
}

model City {
  id       Int        @id(map: "City_pk") @default(autoincrement())
  name     String?
  id_State Int?
  State    State?     @relation(fields: [id_State], references: [id], map: "State_fk")
  District District[]
}

model District {
  id          Int           @id(map: "District_pk") @default(autoincrement())
  id_City     Int?
  City        City?         @relation(fields: [id_City], references: [id], map: "City_fk")
  PostalArea  PostalArea[]
  PublicPlace PublicPlace[]
}

model Email {
  id      Int    @id(map: "Email_pk") @default(autoincrement())
  address String
  User    User[]
}

model Farm {
  id            Int            @id(map: "Farm_pk") @default(autoincrement())
  name          String?
  description   String?
  createdAt     DateTime?      @default(now()) @db.Timestamptz(6)
  active        Boolean?
  deactivatedAt DateTime?      @db.Timestamptz(6)
  id_Address    Int?
  Address       Address?       @relation(fields: [id_Address], references: [id], map: "Address_fk")
  Farm_Station  Farm_Station[]
  User_Farm     User_Farm[]
}

model Farm_Station {
  id         Int      @id(map: "Farm_Station_pk") @default(autoincrement())
  id_Farm    Int?
  id_Station Int?
  Farm       Farm?    @relation(fields: [id_Farm], references: [id], map: "Farm_fk")
  Station    Station? @relation(fields: [id_Station], references: [id], map: "Station_fk")
}

model Phone {
  id           Int          @id(map: "Phone_pk") @default(autoincrement())
  DDD          String?
  DDI          String?
  number       String?
  active       Boolean      @default(true)
  id_PhoneType Int?
  PhoneType    PhoneType?   @relation(fields: [id_PhoneType], references: [id], map: "PhoneType_fk")
  User_Phone   User_Phone[]
}

model PhoneType {
  id          Int     @id(map: "PhoneType_pk") @default(autoincrement())
  description String
  Phone       Phone[]
}

model PostalArea {
  id          Int       @id(map: "PostalArea_pk") @default(autoincrement())
  id_District Int?
  id_Area     Int?
  Area        Area?     @relation(fields: [id_Area], references: [id], map: "Area_fk")
  District    District? @relation(fields: [id_District], references: [id], map: "District_fk")
}

model PublicPlace {
  id                 Int              @id(map: "PublicPlace_pk") @default(autoincrement())
  id_District        Int?
  id_PublicPlaceType Int?
  District           District?        @relation(fields: [id_District], references: [id], map: "District_fk")
  PublicPlaceType    PublicPlaceType? @relation(fields: [id_PublicPlaceType], references: [id], map: "PublicPlaceType_fk")
  Area               Area[]
}

model PublicPlaceType {
  id          Int           @id(map: "PublicPlaceType_pk") @default(autoincrement())
  name        String
  PublicPlace PublicPlace[]
}

model State {
  id         Int      @id(map: "State_pk") @default(autoincrement())
  name       String?
  id_Country Int?
  Country    Country? @relation(fields: [id_Country], references: [id], map: "Country_fk")
  City       City[]
}

model User {
  id            Int          @id(map: "User_pk") @default(autoincrement())
  name          String
  firstName     String
  lastName      String
  nickName      String?
  passwordHash  String
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  active        Boolean      @default(true)
  deactivatedAt DateTime?    @db.Timestamptz(6)
  id_Email      Int?
  id_Address    Int?
  Address       Address?     @relation(fields: [id_Address], references: [id], map: "Address_fk")
  Email         Email?       @relation(fields: [id_Email], references: [id], map: "Email_fk")
  User_Farm     User_Farm[]
  User_Phone    User_Phone[]
}

model User_Farm {
  id      Int   @id(map: "User_Farm_pk") @default(autoincrement())
  id_User Int?
  id_Farm Int?
  Farm    Farm? @relation(fields: [id_Farm], references: [id], map: "Farm_fk")
  User    User? @relation(fields: [id_User], references: [id], map: "User_fk")
}

model User_Phone {
  id       Int    @id(map: "User_Phone_pk") @default(autoincrement())
  id_User  Int?
  id_Phone Int?
  Phone    Phone? @relation(fields: [id_Phone], references: [id], map: "Phone_fk")
  User     User?  @relation(fields: [id_User], references: [id], map: "User_fk")
}
